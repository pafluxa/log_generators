"""
USS Enterprise Diagnostic Report Generator
=========================================

Generates realistic system failure reports with:
1. Human-readable symptom descriptions (no system names)
2. Structured system::subsystem mappings
3. Proper Star Trek technobabble

Author: Lt. Commander Data
Stardate: 47988.3
"""
import os
import re

import random
from typing import Dict, List, Tuple, TypedDict, Optional
from dataclasses import dataclass
import numpy as np
from faker import Faker
import textwrap

from openai import OpenAI


class SystemTemplate(TypedDict):
    """Type definition for system configuration templates."""
    phrases: List[str]
    subsystems: List[str]
    units: List[str]
    fails: List[str]


class StarfleetReport(TypedDict):
    """Type definition for generated reports."""
    note: str
    systems: str


@dataclass
class USSEnterpriseDiagnosticGenerator:
    """
    Generates USS Enterprise diagnostic reports.

    Features:
    - 36 fully-defined systems with complete cross-references
    - Cascading failure simulations
    - Training-ready output format
    """
    
    def __init__(self, refine_with_deepseek: bool = False):
        """Initialize with Starfleet-standard configurations."""
        self.refinement_enabled = False
        self.dsClient = None
        self._template = ""
        if refine_with_deepseek:
            self.refinement_enabled = True
            self.ds_client = OpenAI(
                base_url="https://api.deepseek.com",
                api_key=os.environ['DEEPSEEK_API_KEY'])
            self._template = """
Your task is to refine the provided notes according to these requirements:

Requirement 1.
Make sure not to change the original content, even if you have previous knowledge about the contents of the note. 

Requeriment 2.
Do not change the format of the note. Make it a single block of plain-text.

Requirement 3.
The line inmediately before the start of the refined note must be __BEGIN_NOTE__

Requirement 4.
The line inmediately after the end of the refined note must be __END_NOTE__

Requirement 5.
The refined note must have between 200 and 400 characters. 

Requirement 6.
The refined note must appear as it was written by a human being in a rush, with sporadic comments 
about how things tend to all break at once.

Notes:

"""
        self.faker = Faker()
        np.random.seed()

        self.technobabble_lexicon = {
            "quantum": ["phase variance", "flux decoherence", "string fragmentation"],
            "subspace": ["domain inversion", "harmonic rift", "polaron bleed"],
            "plasma": ["eddies", "toroidal collapse", "fermion contamination"],
            "bio": ["neural pattern drift", "cellular resequencing decay", "synaptic gap erosion"]
        }

        self.system_templates = self._initialize_system_templates()
        self.failure_chains = self._initialize_failure_chains()
        self.deck_locations = [f"Deck {i}" for i in range(1, 30)] + [
            "Main Engineering", "Bridge", "Shuttle Bay", "Cargo Bay 3"
        ]

    # Generated by DeepSeek R3 model
    def _initialize_system_templates(self) -> Dict[str, SystemTemplate]:
        """Initialize all 36 systems with complete configuration and validation."""
        systems = {
            # Core Systems (12)
            "warp core": {
                "phrases": ["unstable %s in %s", "%s fluctuations detected"],
                "subsystems": ["plasma conduit", "dilithium matrix", "antimatter flow"],
                "units": ["cochranes", "terawatts", "milliisotons"],
                "fails": ["impulse drive", "sensors", "artificial gravity"]
            },
            "transporter buffer": {
                "phrases": ["%s pattern degradation", "quantum %s detected"],
                "subsystems": ["Heisenberg compensator", "pattern enhancer", "phase discriminator"],
                "units": ["quantum%", "microrems"],
                "fails": ["replicators", "holodeck safety"]
            },
            "deflector dish": {
                "phrases": ["%s polarization loss", "%s frequency drift"],
                "subsystems": ["graviton emitter", "metaphasic shielding", "particle deflector"],
                "units": ["gigajoules", "nanometers"],
                "fails": ["navigation", "shield grid"]
            },
            "impulse drive": {
                "phrases": ["%s manifold %s", "plasma %s in %s chamber"],
                "subsystems": ["fusion reactors", "driver coils", "magnetic constrictors"],
                "units": ["terawatts", "cochranes", "newtons"],
                "fails": ["thrusters", "power distribution"]
            },
            "shield grid": {
                "phrases": ["%s modulation failure", "%s frequency %s"],
                "subsystems": ["graviton generators", "phase variance emitters", "multiphasic nodes"],
                "units": ["gigahertz", "isotons", "percent"],
                "fails": ["secondary hull plating", "deflector dish"]
            },
            "structural integrity": {
                "phrases": ["%s stress fractures", "%s field %s"],
                "subsystems": ["duranium grid", "polarized plating", "ablative generators"],
                "units": ["GPa", "newtons/sq.m"],
                "fails": ["inertial dampers", "atmospheric containment"]
            },
            "atmospheric containment": {
                "phrases": ["%s dropping", "%s pressure %s"],
                "subsystems": ["pressure membranes", "primary hull", "secondary hull plating"],
                "units": ["GPa", "newtons/sq.m"],
                "fails": ["secondary hull plating"]
            },
            "computer core": {
                "phrases": ["%s processing %s", "memory %s fragmentation"],
                "subsystems": ["isolinear chips", "optical data network", "quantum processors"],
                "units": ["gigaquads", "nanoseconds", "petaflops"],
                "fails": ["ops systems", "security protocols"]
            },
            "sensors": {
                "phrases": ["%s calibration %s", "%s interference %s"],
                "subsystems": ["tachyon detectors", "gravimetric scanners", "subspace beacons"],
                "units": ["arcseconds", "parsecs", "light-years"],
                "fails": ["navigation", "tactical systems"]
            },
            "coolant system": {
                "phrases": ["%s viscosity anomaly", "thermal %s failure"],
                "subsystems": ["deuterium pumps", "heat exchangers", "emergency vents"],
                "units": ["kelvins", "liters/min"],
                "fails": ["warp core", "environmental"]
            },
            "environmental": {
                "phrases": ["%s controls %s", "atmospheric %s collapse"],
                "subsystems": ["oxygen mixers", "thermal regulators", "pressure membranes"],
                "units": ["ppm", "pascals", "CFM"],
                "fails": ["life support", "crew quarters"]
            },
            "navigation": {
                "phrases": ["%s alignment %s", "stellar %s drift"],
                "subsystems": ["astrometric processors", "warp field calculators", "impulse vectoring"],
                "units": ["arcminutes", "parsecs", "cubic Warp"],
                "fails": ["helm control", "sensor palette"]
            },
            "power distribution": {
                "phrases": ["%s relay %s", "EPS %s overload"],
                "subsystems": ["plasma conduits", "electro-inductors", "capacitor banks"],
                "units": ["terawatts", "volts", "ohms"],
                "fails": ["warp core", "auxiliary power"]
            },

            # Medical Systems (4)
            "medical": {
                "phrases": ["%s scanner %s", "biofilter %s overload"],
                "subsystems": ["tricorder arrays", "hypospray synthesizers", "surgical holograms"],
                "units": ["ccs", "millisieverts", "microbes"],
                "fails": ["sickbay", "quarantine fields"]
            },
            "quarantine fields": {
                "phrases": ["%s containment %s", "force %s degradation"],
                "subsystems": ["level-10 forcefields", "bio-dampers", "decon emitters"],
                "units": ["microbes", "quads", "sterilization%"],
                "fails": ["security protocols", "environmental"]
            },
            "decon protocols": {
                "phrases": ["%s sequence %s", "sterilization %s failure"],
                "subsystems": ["antimicrobial fields", "radiation sweepers", "nanoprobe scrubbers"],
                "units": ["rads", "microbes", "decon%"],
                "fails": ["medical", "crew quarters"]
            },
            "bio-neural gel packs": {
                "phrases": ["%s synaptic %s", "neural %s degradation"],
                "subsystems": ["isolinear nodes", "neuro-electric pathways", "protein matrices"],
                "units": ["quads", "synapses/sec", "nanobots"],
                "fails": ["computer core", "medical"]
            },

            # Tactical Systems (6)
            "phaser banks": {
                "phrases": ["%s capacitor %s", "%s emitter %s"],
                "subsystems": ["nadion generators", "phase coils", "energy relays"],
                "units": ["megajoules", "volts", "amperes"],
                "fails": ["targeting sensors", "power core"]
            },
            "torpedo launchers": {
                "phrases": ["%s loading %s", "%s guidance %s"],
                "subsystems": ["antimatter pods", "magnetic rails", "targeting scanners"],
                "units": ["isotons", "gauss", "radians"],
                "fails": ["weapons locker", "defensive systems"]
            },
            "tactical systems": {
                "phrases": ["%s algorithm %s", "threat %s overload"],
                "subsystems": ["predictive matrices", "weapon interlocks", "shield modulation"],
                "units": ["T-flops", "nanoseconds", "targets"],
                "fails": ["phaser banks", "defensive systems"]
            },
            "defensive systems": {
                "phrases": ["%s protocol %s", "countermeasure %s failure"],
                "subsystems": ["electronic warfare", "point-defense", "cloak detection"],
                "units": ["gigahertz", "decibels", "interception%"],
                "fails": ["shield grid", "tactical systems"]
            },
            "weapons locker": {
                "phrases": ["%s containment %s", "security %s breach"],
                "subsystems": ["phaser banks", "photon torpedoes", "security forcefields"],
                "units": ["units", "security level", "authorization%"],
                "fails": ["security protocols", "armory"]
            },
            "security protocols": {
                "phrases": ["%s override %s", "access %s violation"],
                "subsystems": ["biometric scanners", "forcefield emitters", "intrusion detection"],
                "units": ["security level", "unauthorized accesses", "breaches"],
                "fails": ["computer core", "bridge security"]
            },

            # Engineering Systems (6)
            "bussard collectors": {
                "phrases": ["%s hydrogen %s", "interstellar %s contamination"],
                "subsystems": ["ram-scoop fields", "particle filters", "magnetic conduits"],
                "units": ["grams/sec", "isotons", "gauss"],
                "fails": ["warp core", "fuel processing"]
            },
            "tractor beam": {
                "phrases": ["%s emitter %s", "gravimetric %s distortion"],
                "subsystems": ["focusing coils", "spatial projectors", "attractor arrays"],
                "units": ["newtons", "gravons", "picochranes"],
                "fails": ["deflector dish", "inertial dampers"]
            },
            "replicators": {
                "phrases": ["%s pattern %s", "matter %s corruption"],
                "subsystems": ["quantum templates", "molecular assemblers", "waste reclamators"],
                "units": ["grams/sec", "quads", "atom%"],
                "fails": ["transporter buffer", "crew mess"]
            },
            "holodeck safety": {
                "phrases": ["%s protocol %s", "simulation %s failure"],
                "subsystems": ["photonic buffers", "matter replicators", "morphogenic projectors"],
                "units": ["quads", "kilobytes", "nanobots"],
                "fails": ["life support", "computer core"]
            },
            "inertial dampers": {
                "phrases": ["%s matrix %s", "%s compensation %s"],
                "subsystems": ["graviton emitters", "acceleration buffers", "gyroscopic stabilizers"],
                "units": ["Gs", "newtons", "pascals"],
                "fails": ["artificial gravity", "structural integrity"]
            },
            "artificial gravity": {
                "phrases": ["%s grid %s", "gravimetric %s fluctuations"],
                "subsystems": ["gravity plates", "inertial compensators", "mass sensors"],
                "units": ["Gs", "newtons", "pascals"],
                "fails": ["inertial dampers", "structural integrity"]
            },
            # Auxiliary Systems (8)
            "thrusters": {
                "phrases": ["%s vector %s", "maneuvering %s failure"],
                "subsystems": ["ion pods", "reaction control", "vernier adjustments"],
                "units": ["newtons", "degrees/sec", "impulse%"],
                "fails": ["navigation", "structural integrity"]
            },
            "long range comms": {
                "phrases": ["%s subspace %s", "carrier %s distortion"],
                "subsystems": ["hyperwave transceivers", "quasar amplifiers", "antique radio"],
                "units": ["warp-factors", "parsecs", "gigaquads"],
                "fails": ["bridge module", "emergency beacons"]
            },
            "warp field stabilizers": {
                "phrases": ["%s geometry %s", "subspace %s collapse"],
                "subsystems": ["graviton emitters", "quantum flux regulators", "manifold projectors"],
                "units": ["cochranes", "millicochranes", "warp-factors"],
                "fails": ["navigational sensors", "impulse drive"]
            },
            "emergency medical hologram": {
                "phrases": ["%s matrix %s", "holo-%s degradation"],
                "subsystems": ["photonic processors", "medical databases", "ethical subroutines"],
                "units": ["gigaquads", "nanobots", "bedside%"],
                "fails": ["sickbay", "computer core"]
            },
            "sensor palette": {
                "phrases": ["%s calibration %s", "multi-%s interference"],
                "subsystems": ["tachyon beams", "gravimetric arrays", "bio-scanners"],
                "units": ["arcminutes", "terawatts", "picoamps"],
                "fails": ["science labs", "tactical systems"]
            },
            "secondary hull plating": {
                "phrases": ["%s microfractures %s", "ablative %s failure"],
                "subsystems": ["tritanium layers", "polarized mesh", "metaphasic coating"],
                "units": ["centimeters", "newtons", "GPa"],
                "fails": ["primary hull", "shield modulation"]
            },
            "auxiliary power": {
                "phrases": ["%s conduit %s", "emergency %s drain"],
                "subsystems": ["fusion generators", "capacitor banks", "EPS taps"],
                "units": ["megawatts", "joules", "volts"],
                "fails": ["life support", "emergency lighting"]
            },
            "quantum torpedo bay": {
                "phrases": ["%s loading %s", "warhead %s instability"],
                "subsystems": ["zero-point chambers", "spatial warheads", "launch rails"],
                "units": ["isotons", "quantum%", "gigaquads"],
                "fails": ["weapons locker", "defensive systems"]
            },
            "life support": {
                "phrases": ["%s failure in %s", "%s malfunction detected"],
                "subsystems": ["atmosphere processors", "CO2 scrubbers", "nitrogen regulators"],
                "units": ["ppm", "CFM", "BTUs"],
                "fails": ["crew quarters", "medical"]
            },
            "crew quarters": {
                "phrases": ["%s environment %s", "habitat %s failure"],
                "subsystems": ["life support nodes", "thermal regulation", "artificial gravity"],
                "units": ["comfort%", "degrees", "humidity%"],
                "fails": ["environmental", "medical"]
            },
            "ops systems": {
                "phrases": ["%s protocol %s", "operational %s failure"],
                "subsystems": ["command interfaces", "priority channels", "alert systems"],
                "units": ["priority level", "alerts", "systems online%"],
                "fails": ["computer core", "bridge module"]
            },
            "science labs": {
                "phrases": ["%s experiment %s", "research %s containment"],
                "subsystems": ["containment fields", "sensor arrays", "analysis computers"],
                "units": ["experiments", "data quads", "containment%"],
                "fails": ["sensors", "computer core"]
            },
            "emergency lighting": {
                "phrases": ["%s circuit %s", "backup %s failure"],
                "subsystems": ["glow panels", "power relays", "battery backups"],
                "units": ["lumens", "volts", "hours"],
                "fails": ["auxiliary power", "environmental"]
            },
            "emergency forcefields": {
                "phrases": ["%s containment %s", "emergency %s failure"],
                "subsystems": ["field emitters", "power nodes", "containment projectors"],
                "units": ["field strength", "containment%", "watts"],
                "fails": ["structural integrity", "power distribution"]
            },
            "sickbay": {
                "phrases": ["%s systems %s", "medical %s offline"],
                "subsystems": ["biobeds", "surgical bay", "diagnostic scanners"],
                "units": ["patients", "ccs", "procedures"],
                "fails": ["medical", "emergency medical hologram"]
            },
            "helm control": {
                "phrases": ["%s response %s", "flight %s failure"],
                "subsystems": ["control interfaces", "navigational links", "thruster controls"],
                "units": ["response time", "latency", "accuracy%"],
                "fails": ["navigation", "computer core"]
            },
            "primary hull": {
                "phrases": ["%s integrity %s", "structural %s compromised"],
                "subsystems": ["tritanium alloy", "support beams", "emergency seals"],
                "units": ["GPa", "stress factor", "integrity%"],
                "fails": ["structural integrity", "atmospheric containment"]
            },
            "bridge module": {
                "phrases": ["%s command %s", "primary %s failure"],
                "subsystems": ["command chairs", "ops station", "tactical displays"],
                "units": ["priority level", "systems online%", "alerts"],
                "fails": ["computer core", "security protocols"]
            },
            "emergency beacons": {
                "phrases": ["%s signal %s", "distress %s failure"],
                "subsystems": ["subspace transmitters", "power cells", "antenna array"],
                "units": ["lightyears", "watts", "signal strength"],
                "fails": ["long range comms", "auxiliary power"]
            },
            "fuel processing": {
                "phrases": ["%s refinement %s", "deuterium %s failure"],
                "subsystems": ["slush processors", "purification grids", "storage tanks"],
                "units": ["liters/min", "purity%", "slush density"],
                "fails": ["warp core", "impulse drive"]
            },
            "armory": {
                "phrases": ["%s security %s", "weapons %s breach"],
                "subsystems": ["phaser racks", "security forcefields", "access controls"],
                "units": ["weapons", "security level", "breaches"],
                "fails": ["security protocols", "weapons locker"]
            },
            "bridge security": {
                "phrases": ["%s protocols %s", "bridge %s compromised"],
                "subsystems": ["forcefields", "security teams", "intrusion detection"],
                "units": ["security level", "breaches", "response time"],
                "fails": ["security protocols", "computer core"]
            },
            "crew mess": {
                "phrases": ["%s systems %s", "food %s failure"],
                "subsystems": ["replicator terminals", "dining areas", "waste reclamation"],
                "units": ["meals", "nutrition%", "waste%"],
                "fails": ["replicators", "environmental"]
            },
            "shield modulation": {
                "phrases": ["%s frequency %s", "deflector %s inversion"],
                "subsystems": ["multiphasic emitters", "graviton projectors", "harmonic dampers"],
                "units": ["gigahertz", "isotons", "phase%"],
                "fails": ["deflector dish", "tactical systems"]
            },
            "targeting sensors": {
                "phrases": ["%s lock %s", "weapons %s failure"],
                "subsystems": ["phaser targeting", "torpedo guidance", "threat analysis"],
                "units": ["accuracy%", "response time", "targets"],
                "fails": ["tactical systems", "sensors"]
            },
            "power core": {
                "phrases": ["%s output %s", "main %s fluctuation"],
                "subsystems": ["plasma conduits", "energy regulators", "EPS taps"],
                "units": ["terawatts", "volts", "stability%"],
                "fails": ["warp core", "auxiliary power"]
            },
            "navigational sensors": {
                "phrases": ["%s alignment %s", "stellar %s drift"],
                "subsystems": ["astrometric scanners", "warp field sensors", "impulse tracking"],
                "units": ["arcminutes", "parsecs", "warp factor"],
                "fails": ["navigation", "sensors"]
            }
        }

        # Final validation
        for sys_name, config in systems.items():
            for failed_system in config["fails"]:
                if failed_system not in systems:
                    raise ValueError(f"System {failed_system} referenced in {sys_name} but not defined")

        return systems

    def _initialize_failure_chains(self) -> List[Tuple[str, List[str]]]:
        """Define failure sequences with validation."""
        chains = [
            ("plasma leak", ["warp core", "coolant system", "environmental"]),
            ("subspace anomaly", ["sensors", "navigation", "shield modulation"]),
            ("biohazard", ["medical", "quarantine fields", "decon protocols"]),
            ("power loss", ["warp core", "impulse drive", "auxiliary power"]),
            ("hull breach", ["structural integrity", "atmospheric containment", "emergency forcefields"]),
            ("weapons malfunction", ["phaser banks", "torpedo launchers", "tactical systems"]),
            ("computer virus", ["computer core", "ops systems", "security protocols"]),
            ("sensor ghosting", ["sensors", "science labs", "tactical systems"])
        ]

        # Validate all systems in chains exist
        for root, systems in chains:
            for sys in systems:
                if sys not in self.system_templates:
                    raise ValueError(f"System {sys} in failure chain not defined")

        return chains

    def _get_location(self) -> str:
        """Generate a random ship location."""
        return random.choice(self.deck_locations) + f", Section {random.randint(1, 42)}"

    def generate_technobabble(self, system: str) -> str:
        """Generate symptom description without system names."""
        try:
            template = self.system_templates[system]
            phrase = random.choice(template["phrases"])

            symptoms = []
            for _ in range(phrase.count("%s")):
                if random.random() > 0.7:
                    category = random.choice(list(self.technobabble_lexicon.keys()))
                    symptoms.append(random.choice(self.technobabble_lexicon[category]))
                else:
                    symptoms.append(f"{random.choice(template['subsystems'])} anomaly")

            return phrase % tuple(symptoms)
        except KeyError:
            return f"unknown system anomaly in {self._get_location()}"

    def generate_failure_chain(self) -> Tuple[List[str], List[Tuple[str, str]]]:
        """Generate a cascading failure sequence."""
        root_cause, systems = random.choice(self.failure_chains)
        symptoms = [f"Initial {root_cause.replace('_', ' ')} detected in {self._get_location()}"]
        affected = []

        for system in systems:
            symptom = self.generate_technobabble(system)
            next_symptom_conn = np.random.choice([
                'with secondary', 
                'and',
                ])
            symptoms.append(f"{next_symptom_conn} {symptom}")

            template = self.system_templates.get(system, {})
            subsystem = next(
                (sub for sub in template.get("subsystems", []) if sub in symptom),
                random.choice(template["subsystems"]) if "subsystems" in template else "unknown_subsystem"
            )
            affected.append((system, subsystem))

        return symptoms, affected

    def generate_report(self) -> StarfleetReport:
        """Generate complete diagnostic report."""
        
        all_symptoms = []
        all_affected = []

        for _ in range(random.randint(2, 4)):
            symptoms, affected = self.generate_failure_chain()
            all_symptoms.extend(symptoms)
            all_affected.extend(affected)

        # Remove duplicates while preserving order
        seen = set()
        unique_affected = []
        for sys, sub in all_affected:
            if (sys, sub) not in seen:
                seen.add((sys, sub))
                unique_affected.append((sys, sub))
        
        note = " ".join(all_symptoms) + random.choice([".", "!", ","]),
        systems = ";".join(f"{sys}::{sub}" for sys, sub in unique_affected)
        if self.refinement_enabled: 
            content = f"Note :\n {note}\n\n"
            # try:
            response = self.ds_client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "You are marvelous writer."},
                    {"role": "user", "content": self._template + content},
                ],
                model="deepseek-chat",
                temperature=1.2,
                stream=False,
                max_tokens=1024,
            )
            raw_answer = response.choices[0].message.content
            #except Exception as e:
            #     raise Exception(e)
            
            pattern = r'__BEGIN_NOTE__([\s\S]*?)__END_NOTE__'
            note = re.search(pattern, raw_answer).group(1).strip()
        
        return {'note': note, 'systems': systems} 
        
    @property
    def systems(self):
        return self.system_templates

    def generate_full_report(self, report: Optional[str] = None) -> str:
        """Generate formatted Starfleet report."""
        report = self.generate_report()

        return f"""
{'-' * 80}\n{str('*' * 22) + '    USS ENTERPRISE-E DIAGNOSTICS    ' + str('*' * 22)}\n{'-' * 80}\n
Stardate {random.randint(50000,60000)}.{random.randint(1,9)} | Auth. Code Sigma-{random.randint(1,9)}{chr(65+random.randint(0,25))}

Inspection notes:
{textwrap.fill(report['note'], 80)}


Affected components:
{textwrap.fill(report['systems'].replace(' ', '_'), 80)}
"""


if __name__ == "__main__":
    generator = USSEnterpriseDiagnosticGenerator(refine_with_deepseek=True)
    print(generator.generate_full_report())
